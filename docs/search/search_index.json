{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ncm-issuer","text":""},{"location":"#what-is-ncm-issuer","title":"What is ncm-issuer?","text":"<p>ncm-issuer is a Kubernetes controller (external cert-manager issuer) that allows to integrate with Nokia NetGuard Certificate Manager (NCM) PKI system to sign certificate requests. The integration with NCM makes it easy to obtain non-selfsigned certificates for applications and to ensure that they are valid and up to date.</p>"},{"location":"#how-to-open-issue","title":"How to open issue?","text":"<p>xxx</p>"},{"location":"#how-to-request-feature","title":"How to request feature?","text":"<p>xxx</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of Apache 2.0 License.</p>"},{"location":"documentation/01_installation/","title":"Installation","text":""},{"location":"documentation/01_installation/#prerequisites","title":"Prerequisites","text":"<p>Prerequisites for using ncm-issuer:</p> <ul> <li>NCM release 21 or later,</li> <li>Kubernetes version 1.18 - 1.27,</li> <li>cert-manager version 1.0.0 or later,</li> <li>Docker version 20.10.0 or later,</li> <li>Helm v3.</li> </ul> <p>Note</p> <p>Install docker-re instead of default if you are using CentOS, RedHat or Fedora!</p>"},{"location":"documentation/01_installation/#installing-with-helm","title":"Installing with Helm","text":"<p>The easiest way to install ncm-issuer in Kubernetes cluster is to use Helm. The image will be automatically downloaded from public repository.</p> <p></p> <p>Add the Helm repository:</p> <pre><code>helm repo add nokia https://nokia.github.io/ncm-issuer/charts\n</code></pre> <p>Update your local Helm chart repository cache:</p> <pre><code>helm repo update\n</code></pre> <p>Install ncm-issuer using the command:</p> <pre><code>helm install \\\nncm-issuer nokia/ncm-issuer \\\n--create-namespace --namespace ncm-issuer \n</code></pre> <p>On the other hand, if you did not add Helm repository, but downloaded the packaged version of ncm-issuer use:</p> <pre><code>helm install \\\nncm-issuer \\\n--create-namespace --namespace ncm-issuer \\\nncm-issuer/charts/ncm-issuer\n</code></pre>"},{"location":"documentation/01_installation/#using-own-local-or-remote-registry","title":"Using own (local or remote) registry","text":"<p>In case you want to use your own registry, just change the value pointing to a specific registry in the <code>values.yaml</code> file in directory that contains Helm files. Then just repeat the steps mentioned above.</p> <pre><code>sed -i \"s|docker.io/misiektoja|&lt;your-registry&gt;|g\" values.yaml\n</code></pre> <p>Note</p> <p>Using this command will also change the registry pointing to the image location of sidecar. Bear this in mind if you want to use sidecar as well.</p> <p>However, if you do not know where to get image from, because you cloned the repository just use the command:</p> <pre><code>make docker-build\n</code></pre> <p>or (if you also want to save image)</p> <pre><code>make docker-save\n</code></pre> <p>Saved image should appear in the path <code>./builds/ncm-issuer-images/</code>.</p>"},{"location":"documentation/02_configuration/","title":"Configuration","text":"<p>To make the ncm-issuer work properly, it is necessary to create few Kubernetes secrets that contains credentials to NCM REST API and optional TLS configuration.</p> <p></p>"},{"location":"documentation/02_configuration/#ncm-rest-api-credentials","title":"NCM REST API credentials","text":"<pre><code>kubectl create secret generic \\\n&lt;secret-name&gt; \\\n-n &lt;namespace&gt; \\\n--from-literal=username=&lt;username&gt; \\\n--from-literal=usrPassword=&lt;password&gt;\n</code></pre>"},{"location":"documentation/02_configuration/#tls-without-client-authentication","title":"TLS without client authentication","text":"<pre><code>kubectl create secret generic \\\n&lt;secret-name&gt; \\\n-n &lt;namespace&gt; \\\n--from-file=cacert=&lt;ca-for-tls.pem&gt;\n</code></pre>"},{"location":"documentation/02_configuration/#tls-with-client-authentication","title":"TLS with client authentication","text":"<pre><code>kubectl create secret generic \\\n&lt;secret-name&gt; \\\n-n &lt;namespace&gt; \\\n--from-file=cacert=&lt;ca-for-tls.pem&gt; \\\n--from-file=key=&lt;client-auth-pkey.pem&gt; \\\n--from-file=cert=&lt;client-auth-cert.pem&gt;\n</code></pre> <p>To make sure that specific secret have been created correctly, you can check this by using command:</p> <pre><code>kubectl -n &lt;namespace&gt; describe secrets &lt;secret-name&gt;\n</code></pre>"},{"location":"documentation/metrics/enable-metrics/","title":"Prometheus metrics","text":""},{"location":"release-notes/1.0.1/","title":"The first official version of ncm-issuer!","text":"<ul> <li>Full integration with NCM (fetching CA from db, setting pem chain, adding issued certs to db, renewal support etc.)</li> <li>Installation via Helm charts</li> <li>Well-developed \"spec\" section in the issuer .yaml file</li> </ul>"},{"location":"release-notes/1.0.3/","title":"What's changed","text":"<p>ncm-issuer <code>1.0.3</code> includes several features and fixes for previously known issues.</p>"},{"location":"release-notes/1.0.3/#features","title":"Features","text":"<ul> <li>Added possibility to specify backup NCM API server in case of lack of connection to the main one</li> <li>Added possibility to include certificate chain (without end-entity certificate) in <code>ca.crt</code></li> <li>Added possibility to include only end-user certificate in <code>tls.crt</code></li> </ul> <p>For more detailed view about new features, see the  or !</p>"},{"location":"release-notes/1.0.3/#fixes","title":"Fixes","text":"<ul> <li>Fixed misinterpretation in case of manually triggering rotation of a private key (previously renewal operation was triggered instead of re-enrollment)</li> <li>Fixed bug related to certificates with long names</li> <li>Fixed several bugs during certificate renewal</li> </ul>"},{"location":"release-notes/1.0.3/#other","title":"Other","text":"<ul> <li>Bumped go from 1.17 to 1.19.6</li> </ul>"},{"location":"release-notes/1.1.0/","title":"What's changed","text":"<p>ncm-issuer <code>1.1.0</code> introduces a number of improvements mainly related to the logic of handling and sending requests to NCM API, but also significant enhancement to Helm chart. Besides the improvements, there are also a few features, including sidecar, selection of the logging verbosity level and Prometheus metrics.</p> <p> Warning: Read this before upgrading from version <code>&lt;1.1.0</code>!</p> <p>New, more user-friendly fields names are used to simplify the definition of <code>Issuer</code> and <code>ClusterIssuer</code>. This means that the old names are not suggested way of declaring them, but they will remain supported for a few more releases.</p> <p>New suggested way of defining <code>Issuer</code> or <code>ClusterIssuer</code> and their fields description:  Custom resource definitions (CRDs)</p>"},{"location":"release-notes/1.1.0/#improvements","title":"Improvements","text":"<ul> <li>The <code>Issuer</code> and <code>ClusterIssuer</code> definitions are improved to use more user-friendly names   and grouped into appropriate sections (see mentioned warning)</li> <li>NCM API errors (indicating that API is not available) or statuses indicating that certificate    has not yet been  issued now results in CSRs being queued and processed after some time instead    of being immediately re-processed and making unnecessary requests to NCM API</li> <li>Improve the mechanism responsible for the selection of NCM API - it's now based on    the first-alive algorithm</li> <li>Helm chart is rewritten according to the rules given in the Helm documentation</li> </ul>"},{"location":"release-notes/1.1.0/#features","title":"Features","text":"<ul> <li>Add option to set HTTP client timeout</li> <li>Add option to set a time indicating how often NCM API(s) availability should be   checked (related to new NCM API selection mechanism)</li> <li>Add Prometheus support to allow   monitoring of the total number of enrollment or renewal operations. Each of these operations   also has metrics responsible for determining how many of them were successful or failed. The   metrics attempt to reflect the number of CSRs or renewals sent to the NCM, if request is   rejected or postponed by NCM, this state will be reflected as failure of the enrollment operation,   while accepting and returning appropriate resource will result in successful enrollment or   renewal operation (use the prefix <code>ncm_issuer</code> in Prometheus query to see all possible metrics)</li> <li>More efficient debugging of ncm-issuer is added with the option of using sidecar or   defining logging level verbosity (for more information, see:   Troubleshooting)</li> </ul>"},{"location":"release-notes/1.1.0/#fixes","title":"Fixes","text":"<ul> <li>Fix occasionally encountered data-races when accessing saved <code>Issuer</code> or <code>ClusterIssuer</code> config</li> </ul> <p>For more detailed view about new CRDs definition, troubleshooting and more, see: README</p>"}]}