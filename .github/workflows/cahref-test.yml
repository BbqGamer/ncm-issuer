name: ca name and href tests

on:
  push:
  schedule:
    # * is a special character in YAML, so you have to quote this string
    - cron:  '0 2 * * 6'

jobs:
  cahref_test:
    name: "CAHREF Tests"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:

    - name: "checkout GIT"
      uses: actions/checkout@v2
    - uses: actions/setup-go@v3
    - run: go version

    - name: "build ncm-issuer image"
      run: |
        make vendor
        make docker-build

    - name: "install microk8s"
      run: |
        sudo snap install microk8s --classic
        sudo microk8s status --wait-ready
        sudo microk8s enable helm3
        sudo microk8s enable dns
        sudo microk8s enable registry
        echo K8S_VERSION=$(sudo microk8s.kubectl version --short=true|grep -Po 'Server Version: \K.*' -m 1) >> $GITHUB_ENV
    - run: echo "k8s ${{ env.K8S_VERSION }}"

    - name: "inject insecure-registry to docker"
      run: |
        REG_ADDR=$(sudo microk8s kubectl get services -A | grep -i container-registry | awk '{print $4}')
        OPTIONS=$(cat /etc/docker/daemon.json)
        sudo sh -c "echo '{${OPTIONS:1: -2}, \"insecure-registries\": [\"${REG_ADDR}\"] }' > /etc/docker/daemon.json"
        sudo systemctl restart docker

    - name: "sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "push ncm-issuer image to local registry"
      run: |
        docker images | grep -i ncm-issuer | awk '{print $1":"$2}' | xargs -I V sh -c 'docker tag V $REG_ADDR:32000/V;docker push $REG_ADDR:32000/V'
        

    - name: "install cert-manager charts"
      run: |
        sudo microk8s.kubectl create namespace cert-manager
        sudo microk8s.helm3 repo add jetstack https://charts.jetstack.io
        sudo microk8s.helm3 repo update
        sudo microk8s.helm3 install cert-manager jetstack/cert-manager --namespace cert-manager --set installCRDs=true
        echo CERTMGR_VERSION=$(sudo microk8s.helm3 list -n cert-manager -o yaml|grep -Po 'cert-manager-\K.*' -m 1) >> $GITHUB_ENV
    - run: echo "cert-manager ${{ env.CERTMGR_VERSION }}"

    - name: "sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "cert-manager status"
      run: |
        sudo microk8s.helm3 list -A
        sudo microk8s.kubectl get pods -A
        sudo microk8s.kubectl -n cert-manager logs `sudo microk8s.kubectl get pods -n cert-manager -l app=cert-manager -o jsonpath='{.items[0].metadata.name}'`|tail -25

    - name: "prepare environment / create namespace and secret"
      run: |
        mkdir -p data/logs
        echo "$NCM_CA_BUNDLE" > data/ca_bundle.pem
        cp .github/*.yml data/
        sed -i "s|CASNAME: SubCA|CASHREF: $NCM_CAHREF|g" data/ncm-issuer.yml
        sed -i "s|ncmSERVER: NCM_SRV|ncmSERVER: $NCM_HOST|g" data/ncm-issuer.yml
        sed -i "s|docker.io/misiektoja|${REG_ADDR}:32000|g" helm/values.yaml
        sudo microk8s.kubectl create namespace ncm-issuer
        sudo microk8s.kubectl create secret generic ncm-issuer -n ncm-issuer --from-literal=username=$NCM_USER --from-literal=usrPassword=$NCM_PASSWORD
        sudo microk8s.kubectl create secret generic ncm-issuer-bundle -n ncm-issuer --from-file=cacert=data/ca_bundle.pem
      env:
        NCM_HOST: ${{ secrets.NCM_HOST }}
        NCM_USER: ${{ secrets.NCM_USER }}
        NCM_PASSWORD: ${{ secrets.NCM_PASSWORD }}
        NCM_CA_BUNDLE: ${{ secrets.NCM_CA_BUNDLE }}
        NCM_CAHREF: ${{ secrets.NCM_CAHREF }}

    - name: "install ncm-issuer plugin"
      run: |
        sudo microk8s.helm3 install -n ncm-issuer ncm-issuer "$(pwd)/helm"

    - name: "sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "ncm-issuer plugin status"
      run: |
        sudo microk8s.helm3 list -A
        sudo microk8s.kubectl get pods -A
        sudo microk8s.kubectl -n ncm-issuer logs `sudo microk8s.kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'`|tail -25

    - name: "create issuer"
      run: |
        sudo microk8s.kubectl apply -f data/ncm-issuer.yml
        sudo microk8s.kubectl get issuers.certmanager.ncm.nokia.com -n ncm-issuer

    - name: "sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "check issuer status"
      run: |
        sudo microk8s.kubectl get issuers.certmanager.ncm.nokia.com -n ncm-issuer
        sudo microk8s.kubectl -n ncm-issuer describe issuers.certmanager.ncm.nokia.com ncm
        sudo microk8s.kubectl -n ncm-issuer logs `sudo microk8s.kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'`|tail -25
        sudo microk8s.kubectl get issuers.certmanager.ncm.nokia.com -n ncm-issuer | grep -i True

    - name: "create certificate resource"
      run: |
        sudo microk8s.kubectl apply -f data/cert-resource.yml

    - name: "sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "check certificate resource"
      run: |
        sudo microk8s.kubectl describe cert ncm-cert -n ncm-issuer
        sudo microk8s.kubectl -n ncm-issuer logs `sudo microk8s.kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'`|tail -25
        sudo microk8s.kubectl describe cert ncm-cert -n ncm-issuer  | grep "The certificate has been successfully issued"
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer | grep "Approved"
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer | grep "Issued"
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer | grep "Certificate:" | awk '{print $2}' | base64 -d > /tmp/cert.der
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer | grep "Ca:" | awk '{print $2}' | base64 -d > /tmp/ca.pem
        openssl x509 -in /tmp/cert.der -text -noout
        openssl verify -CAfile /tmp/ca.pem --untrusted /tmp/cert.der /tmp/cert.der

    - name: "[ * ] collecting test logs"
      continue-on-error: true
      if: ${{ failure() }}
      run: |
        sudo  microk8s.kubectl get namespaces > data/logs/get_namespaces.log
        sudo microk8s.kubectl get po -A > data/logs/get_pods.log
        sudo microk8s.kubectl describe pods ncm-issuer -n ncm-issuer > data/logs/describe_ncm-issuer.log
        sudo microk8s.kubectl get secrets -n ncm-issuer > data/logs/get_secrets.log
        sudo microk8s.kubectl get issuers.certmanager.ncm.nokia.com -n ncm-issuer > data/logs/get_issuers.log
        sudo microk8s.kubectl describe issuer.certmanager.ncm.nokia.com  -n ncm-issuer > data/logs/describe_issuer.log
        sudo microk8s.kubectl -n ncm-issuer logs  `sudo microk8s.kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'` > data/logs/ncm-issuer.log
        sudo microk8s.kubectl -n cert-manager logs `sudo microk8s.kubectl get pods -n cert-manager -l app=cert-manager -o jsonpath='{.items[0].metadata.name}'` > data/logs/cert-manager.log
        sudo microk8s.kubectl get certificaterequest -n ncm-issuer > data/logs/get_csr.log
        sudo  microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer > data/logs/describe_csr.log
        sudo microk8s.kubectl get certificate -n ncm-issuer > data/logs/get_certificate.log
        sudo microk8s.kubectl describe certificate ncm-cert -n ncm-issuer > data/logs/describe_certificate.log
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: logs-cahref.tar.gz
        path: ${{ github.workspace }}/artifact/upload/

  caname_test:
    name: "CANAME Test"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:

    - name: "checkout GIT"
      uses: actions/checkout@v2
    - uses: actions/setup-go@v3
    - run: go version

    - name: "build plugin"
      run: |
        go mod vendor
        make docker_build_img
        make save

    - name: "install microk8s"
      run: |
        sudo snap install microk8s --classic
        sudo microk8s status --wait-ready
        sudo microk8s enable helm3
        sudo microk8s enable dns
        echo K8S_VERSION=$(sudo microk8s.kubectl version --short=true|grep -Po 'Server Version: \K.*' -m 1) >> $GITHUB_ENV
    - run: echo "k8s ${{ env.K8S_VERSION }}"

    - name: "install cert-manager charts"
      run: |
        sudo microk8s.kubectl create namespace cert-manager
        sudo microk8s.helm3 repo add jetstack https://charts.jetstack.io
        sudo microk8s.helm3 repo update
        sudo microk8s.helm3 install cert-manager jetstack/cert-manager --namespace cert-manager --set installCRDs=true
        echo CERTMGR_VERSION=$(sudo microk8s.helm3 list -n cert-manager -o yaml|grep -Po 'cert-manager-\K.*' -m 1) >> $GITHUB_ENV
    - run: echo "cert-manager ${{ env.CERTMGR_VERSION }}"

    - name: "sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "cert-manager status"
      run: |
        sudo microk8s.helm3 list -A
        sudo microk8s.kubectl get pods -A
        sudo microk8s.kubectl -n cert-manager logs `sudo microk8s.kubectl get pods -n cert-manager -l app=cert-manager -o jsonpath='{.items[0].metadata.name}'`|tail -25

    - name: "prepare environment / create namespace and secret"
      run: |
        mkdir -p data/logs
        echo "$NCM_CA_BUNDLE" > data/ca_bundle.pem
        cp .github/*.yml data/
        sed -i "s|ncmSERVER: NCM_SRV|ncmSERVER: $NCM_HOST|g" data/ncm-issuer.yml
        sudo microk8s.kubectl create namespace ncm-issuer
        sudo microk8s.kubectl create secret generic ncm-issuer -n ncm-issuer --from-literal=username=$NCM_USER --from-literal=usrPassword=$NCM_PASSWORD
        sudo microk8s.kubectl create secret generic ncm-issuer-bundle -n ncm-issuer --from-file=cacert=data/ca_bundle.pem
      env:
        NCM_HOST: ${{ secrets.NCM_HOST }}
        NCM_USER: ${{ secrets.NCM_USER }}
        NCM_PASSWORD: ${{ secrets.NCM_PASSWORD }}
        NCM_CA_BUNDLE: ${{ secrets.NCM_CA_BUNDLE }}

    - name: "install ncm-issuer plugin"
      run: |
        sudo microk8s.helm3 install -n ncm-issuer ncm-issuer "$(pwd)/helm"

    - name: "sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "ncm-issuer plugin status"
      run: |
        sudo microk8s.helm3 list -A
        sudo microk8s.kubectl get pods -A
        sudo microk8s.kubectl -n ncm-issuer logs `sudo microk8s.kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'`|tail -25

    - name: "create issuer"
      run: |
        sudo microk8s.kubectl apply -f data/ncm-issuer.yml
        sudo microk8s.kubectl get issuers.certmanager.ncm.nokia.com -n ncm-issuer

    - name: "sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "check issuer status"
      run: |
        sudo microk8s.kubectl get issuers.certmanager.ncm.nokia.com -n ncm-issuer
        sudo microk8s.kubectl -n ncm-issuer describe issuers.certmanager.ncm.nokia.com ncm
        sudo microk8s.kubectl -n ncm-issuer logs `sudo microk8s.kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'`|tail -25
        sudo microk8s.kubectl get issuers.certmanager.ncm.nokia.com -n ncm-issuer | grep -i True

    - name: "create certificate resource"
      run: |
        sudo microk8s.kubectl apply -f data/cert-resource.yml

    - name: "sleep for 10s"
      uses: juliangruber/sleep-action@v1
      with:
        time: 10s

    - name: "check certificate resource"
      run: |
        sudo microk8s.kubectl describe cert ncm-cert -n ncm-issuer
        sudo microk8s.kubectl -n ncm-issuer logs `sudo microk8s.kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'`|tail -25
        sudo microk8s.kubectl describe cert ncm-cert -n ncm-issuer  | grep "The certificate has been successfully issued"
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer | grep "Approved"
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer | grep "Issued"
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer | grep "Certificate:" | awk '{print $2}' | base64 -d > /tmp/cert.der
        sudo microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer | grep "Ca:" | awk '{print $2}' | base64 -d > /tmp/ca.pem
        openssl x509 -in /tmp/cert.der -text -noout
        openssl verify -CAfile /tmp/ca.pem --untrusted /tmp/cert.der /tmp/cert.der

    - name: "[ * ] collecting test logs"
      continue-on-error: true
      if: ${{ failure() }}
      run: |
        sudo  microk8s.kubectl get namespaces > data/logs/get_namespaces.log
        sudo microk8s.kubectl get po -A > data/logs/get_pods.log
        sudo microk8s.kubectl describe pods ncm-issuer -n ncm-issuer > data/logs/describe_ncm-issuer.log
        sudo microk8s.kubectl get secrets -n ncm-issuer > data/logs/get_secrets.log
        sudo microk8s.kubectl get issuers.certmanager.ncm.nokia.com -n ncm-issuer > data/logs/get_issuers.log
        sudo microk8s.kubectl describe issuer.certmanager.ncm.nokia.com  -n ncm-issuer > data/logs/describe_issuer.log
        sudo microk8s.kubectl -n ncm-issuer logs  `sudo microk8s.kubectl get pods -A -l app=ncm-issuer -o jsonpath='{.items[0].metadata.name}'` > data/logs/ncm-issuer.log
        sudo microk8s.kubectl -n cert-manager logs `sudo microk8s.kubectl get pods -n cert-manager -l app=cert-manager -o jsonpath='{.items[0].metadata.name}'` > data/logs/cert-manager.log
        sudo microk8s.kubectl get certificaterequest -n ncm-issuer > data/logs/get_csr.log
        sudo  microk8s.kubectl describe certificaterequest ncm-cert -n ncm-issuer > data/logs/describe_csr.log
        sudo microk8s.kubectl get certificate -n ncm-issuer > data/logs/get_certificate.log
        sudo microk8s.kubectl describe certificate ncm-cert -n ncm-issuer > data/logs/describe_certificate.log
        mkdir -p ${{ github.workspace }}/artifact/upload
        sudo cp -rp data/ ${{ github.workspace }}/artifact/data/
        sudo tar -C ${{ github.workspace }}/artifact/ -cvzf ${{ github.workspace }}/artifact/upload/artifact.tar.gz data

    - name: "[ * ] uploading artificates"
      uses: actions/upload-artifact@v2
      if: ${{ failure() }}
      with:
        name: logs-caname.tar.gz
        path: ${{ github.workspace }}/artifact/upload/
